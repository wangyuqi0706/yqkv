// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shardctl/shardctlpb/shardctl.proto

package shardctlpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	sessionpb "github.com/wangyuqi0706/yqkv/session/sessionpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OpType int32

const (
	EMPTY OpType = 0
	LEAVE OpType = 1
	MOVE  OpType = 2
	QUERY OpType = 3
	JOIN  OpType = 4
)

var OpType_name = map[int32]string{
	0: "EMPTY",
	1: "LEAVE",
	2: "MOVE",
	3: "QUERY",
	4: "JOIN",
}

var OpType_value = map[string]int32{
	"EMPTY": 0,
	"LEAVE": 1,
	"MOVE":  2,
	"QUERY": 3,
	"JOIN":  4,
}

func (x OpType) String() string {
	return proto.EnumName(OpType_name, int32(x))
}

func (OpType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c34bfbb134cac01e, []int{0}
}

type ReplyStatus int32

const (
	OK               ReplyStatus = 0
	ERR_WRONG_LEADER ReplyStatus = 1
	ERR_BAD_SESSION  ReplyStatus = 2
)

var ReplyStatus_name = map[int32]string{
	0: "OK",
	1: "ERR_WRONG_LEADER",
	2: "ERR_BAD_SESSION",
}

var ReplyStatus_value = map[string]int32{
	"OK":               0,
	"ERR_WRONG_LEADER": 1,
	"ERR_BAD_SESSION":  2,
}

func (x ReplyStatus) String() string {
	return proto.EnumName(ReplyStatus_name, int32(x))
}

func (ReplyStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c34bfbb134cac01e, []int{1}
}

type Args struct {
	Type          OpType                   `protobuf:"varint,1,opt,name=Type,proto3,enum=shardctlpb.OpType" json:"Type,omitempty"`
	SessionHeader *sessionpb.SessionHeader `protobuf:"bytes,6,opt,name=SessionHeader,proto3" json:"SessionHeader,omitempty"`
	NewGroups     []*Group                 `protobuf:"bytes,2,rep,name=NewGroups,proto3" json:"NewGroups,omitempty"`
	LeaveGIDs     []int64                  `protobuf:"varint,3,rep,packed,name=LeaveGIDs,proto3" json:"LeaveGIDs,omitempty"`
	MoveGID       int64                    `protobuf:"varint,4,opt,name=MoveGID,proto3" json:"MoveGID,omitempty"`
	MoveShard     int64                    `protobuf:"varint,7,opt,name=MoveShard,proto3" json:"MoveShard,omitempty"`
	QueryNum      int64                    `protobuf:"varint,5,opt,name=QueryNum,proto3" json:"QueryNum,omitempty"`
}

func (m *Args) Reset()         { *m = Args{} }
func (m *Args) String() string { return proto.CompactTextString(m) }
func (*Args) ProtoMessage()    {}
func (*Args) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34bfbb134cac01e, []int{0}
}
func (m *Args) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Args) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Args.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Args) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Args.Merge(m, src)
}
func (m *Args) XXX_Size() int {
	return m.Size()
}
func (m *Args) XXX_DiscardUnknown() {
	xxx_messageInfo_Args.DiscardUnknown(m)
}

var xxx_messageInfo_Args proto.InternalMessageInfo

type Reply struct {
	WrongLeader bool        `protobuf:"varint,1,opt,name=wrongLeader,proto3" json:"wrongLeader,omitempty"`
	Status      ReplyStatus `protobuf:"varint,2,opt,name=status,proto3,enum=shardctlpb.ReplyStatus" json:"status,omitempty"`
	Message     string      `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Config      *Config     `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34bfbb134cac01e, []int{1}
}
func (m *Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return m.Size()
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

type Group struct {
	ID      int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Servers []string `protobuf:"bytes,2,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34bfbb134cac01e, []int{2}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Group.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return m.Size()
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

type Config struct {
	Num    int64    `protobuf:"varint,1,opt,name=Num,proto3" json:"Num,omitempty"`
	Shards []int64  `protobuf:"varint,2,rep,packed,name=Shards,proto3" json:"Shards,omitempty"`
	Groups []*Group `protobuf:"bytes,3,rep,name=Groups,proto3" json:"Groups,omitempty"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34bfbb134cac01e, []int{3}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return m.Size()
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("shardctlpb.OpType", OpType_name, OpType_value)
	proto.RegisterEnum("shardctlpb.ReplyStatus", ReplyStatus_name, ReplyStatus_value)
	proto.RegisterType((*Args)(nil), "shardctlpb.Args")
	proto.RegisterType((*Reply)(nil), "shardctlpb.Reply")
	proto.RegisterType((*Group)(nil), "shardctlpb.Group")
	proto.RegisterType((*Config)(nil), "shardctlpb.Config")
}

func init() {
	proto.RegisterFile("shardctl/shardctlpb/shardctl.proto", fileDescriptor_c34bfbb134cac01e)
}

var fileDescriptor_c34bfbb134cac01e = []byte{
	// 593 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xf6, 0x4f, 0xe2, 0x26, 0x13, 0xb5, 0xb8, 0x0b, 0x02, 0x2b, 0x42, 0x96, 0x95, 0x03, 0x32,
	0x95, 0xb0, 0x4b, 0x90, 0x40, 0x42, 0x02, 0x91, 0x12, 0xab, 0x04, 0xd2, 0x98, 0xae, 0x4b, 0x51,
	0x91, 0x50, 0xe4, 0xa4, 0x5b, 0x37, 0xa2, 0x89, 0x5d, 0xff, 0x24, 0xe4, 0x2d, 0xe0, 0xc6, 0x91,
	0xc7, 0xe9, 0x31, 0x47, 0x8e, 0x34, 0x79, 0x11, 0xb4, 0x6b, 0xa7, 0x71, 0x04, 0xdc, 0xbe, 0x6f,
	0xbe, 0x99, 0xd9, 0xf9, 0xd9, 0x81, 0x5a, 0x74, 0xee, 0x86, 0xa7, 0xfd, 0xf8, 0xc2, 0x5c, 0x82,
	0xa0, 0x77, 0x03, 0x8d, 0x20, 0xf4, 0x63, 0x1f, 0xc1, 0x4a, 0xaa, 0x3e, 0xf2, 0x06, 0xf1, 0x79,
	0xd2, 0x33, 0xfa, 0xfe, 0xd0, 0xf4, 0x7c, 0xcf, 0x37, 0x99, 0x4b, 0x2f, 0x39, 0x63, 0x8c, 0x11,
	0x86, 0xd2, 0xd0, 0xea, 0x66, 0x44, 0xa2, 0x68, 0xe0, 0x8f, 0x52, 0x5a, 0xfb, 0x2e, 0x40, 0xa1,
	0x11, 0x7a, 0x11, 0x7a, 0x00, 0x85, 0xa3, 0x69, 0x40, 0x14, 0x5e, 0xe3, 0xf5, 0xad, 0x3a, 0x32,
	0x56, 0x2f, 0x18, 0x76, 0x40, 0x15, 0xcc, 0x74, 0xf4, 0x12, 0x36, 0x9d, 0x34, 0xc3, 0x1b, 0xe2,
	0x9e, 0x92, 0x50, 0x91, 0x34, 0x5e, 0xaf, 0xd4, 0x15, 0x23, 0xcb, 0x1b, 0xf4, 0x8c, 0x35, 0x1d,
	0xaf, 0xbb, 0x23, 0x13, 0xca, 0x1d, 0x32, 0xd9, 0x0f, 0xfd, 0x24, 0x88, 0x14, 0x41, 0x13, 0xf5,
	0x4a, 0x7d, 0x3b, 0xff, 0x18, 0x53, 0xf0, 0xca, 0x07, 0xdd, 0x87, 0x72, 0x9b, 0xb8, 0x63, 0xb2,
	0xdf, 0x6a, 0x46, 0x8a, 0xa8, 0x89, 0xba, 0x88, 0x57, 0x06, 0xa4, 0xc0, 0xc6, 0x81, 0xcf, 0xb0,
	0x52, 0xd0, 0x78, 0x5d, 0xc4, 0x4b, 0x4a, 0xe3, 0x28, 0x74, 0x68, 0x6a, 0x65, 0x83, 0x69, 0x2b,
	0x03, 0xaa, 0x42, 0xe9, 0x30, 0x21, 0xe1, 0xb4, 0x93, 0x0c, 0x95, 0x22, 0x13, 0x6f, 0x78, 0xed,
	0x27, 0x0f, 0x45, 0x4c, 0x82, 0x8b, 0x29, 0xd2, 0xa0, 0x32, 0x09, 0xfd, 0x91, 0xd7, 0x4e, 0x5b,
	0xa5, 0xb3, 0x29, 0xe1, 0xbc, 0x09, 0x99, 0x20, 0x45, 0xb1, 0x1b, 0x27, 0xb4, 0x17, 0x3a, 0xb8,
	0x7b, 0xf9, 0x5e, 0x58, 0x12, 0x87, 0xc9, 0x38, 0x73, 0xa3, 0x05, 0x0f, 0x49, 0x14, 0xb9, 0x1e,
	0x51, 0x44, 0x8d, 0xd7, 0xcb, 0x78, 0x49, 0xd1, 0x0e, 0x48, 0x7d, 0x7f, 0x74, 0x36, 0xf0, 0x58,
	0x27, 0x95, 0xf5, 0x1d, 0xbc, 0x66, 0x0a, 0xce, 0x3c, 0x6a, 0x8f, 0xa1, 0xc8, 0xc6, 0x83, 0xb6,
	0x40, 0x68, 0x35, 0x59, 0x61, 0x22, 0x16, 0x5a, 0x4d, 0x9a, 0x3e, 0x22, 0xe1, 0x98, 0x84, 0xe9,
	0x70, 0xcb, 0x78, 0x49, 0x6b, 0x9f, 0x41, 0x4a, 0x93, 0x20, 0x19, 0x44, 0xda, 0x76, 0x1a, 0x44,
	0x21, 0xba, 0x0b, 0x12, 0x1b, 0x4b, 0x1a, 0x24, 0xe2, 0x8c, 0xa1, 0x87, 0x20, 0x65, 0x9b, 0x12,
	0xff, 0xb7, 0xa9, 0xcc, 0x61, 0xe7, 0x05, 0x48, 0xe9, 0x3f, 0x41, 0x65, 0x28, 0x5a, 0x07, 0xef,
	0x8f, 0x4e, 0x64, 0x8e, 0xc2, 0xb6, 0xd5, 0x38, 0xb6, 0x64, 0x1e, 0x95, 0xa0, 0x70, 0x60, 0x1f,
	0x5b, 0xb2, 0x40, 0x8d, 0x87, 0x1f, 0x2c, 0x7c, 0x22, 0x8b, 0xd4, 0xf8, 0xd6, 0x6e, 0x75, 0xe4,
	0xc2, 0xce, 0x2b, 0xa8, 0xe4, 0xa6, 0x85, 0x24, 0x10, 0xec, 0x77, 0x32, 0x87, 0xee, 0x80, 0x6c,
	0x61, 0xdc, 0xfd, 0x88, 0xed, 0xce, 0x7e, 0xb7, 0x6d, 0x35, 0x9a, 0x16, 0x96, 0x79, 0x74, 0x1b,
	0x6e, 0x51, 0xeb, 0x5e, 0xa3, 0xd9, 0x75, 0x2c, 0xc7, 0x69, 0xd9, 0x1d, 0x59, 0xa8, 0x3f, 0x87,
	0xd2, 0xb2, 0x38, 0x64, 0xc0, 0x86, 0xf5, 0x95, 0xf4, 0x93, 0x98, 0x20, 0x39, 0x5f, 0x32, 0xfd,
	0xe9, 0xd5, 0xed, 0xbf, 0x56, 0xb4, 0x77, 0x7c, 0x75, 0xad, 0x72, 0xb3, 0x6b, 0x95, 0xbb, 0x9a,
	0xab, 0xfc, 0x6c, 0xae, 0xf2, 0xbf, 0xe7, 0x2a, 0xff, 0x6d, 0xa1, 0x72, 0x3f, 0x16, 0x2a, 0x37,
	0x5b, 0xa8, 0xdc, 0xaf, 0x85, 0xca, 0x7d, 0xda, 0xcd, 0x5d, 0xda, 0xc4, 0x1d, 0x79, 0xd3, 0xe4,
	0x72, 0xb0, 0xfb, 0x6c, 0xf7, 0xa9, 0x39, 0xbd, 0xfc, 0x32, 0x36, 0xff, 0x71, 0xb6, 0x3d, 0x89,
	0x1d, 0xd9, 0x93, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x91, 0x75, 0xf4, 0xd4, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ShardctlClient is the client API for Shardctl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShardctlClient interface {
	Execute(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Reply, error)
}

type shardctlClient struct {
	cc *grpc.ClientConn
}

func NewShardctlClient(cc *grpc.ClientConn) ShardctlClient {
	return &shardctlClient{cc}
}

func (c *shardctlClient) Execute(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/shardctlpb.shardctl/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShardctlServer is the server API for Shardctl service.
type ShardctlServer interface {
	Execute(context.Context, *Args) (*Reply, error)
}

// UnimplementedShardctlServer can be embedded to have forward compatible implementations.
type UnimplementedShardctlServer struct {
}

func (*UnimplementedShardctlServer) Execute(ctx context.Context, req *Args) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}

func RegisterShardctlServer(s *grpc.Server, srv ShardctlServer) {
	s.RegisterService(&_Shardctl_serviceDesc, srv)
}

func _Shardctl_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardctlServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shardctlpb.shardctl/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardctlServer).Execute(ctx, req.(*Args))
	}
	return interceptor(ctx, in, info, handler)
}

var _Shardctl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shardctlpb.shardctl",
	HandlerType: (*ShardctlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _Shardctl_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shardctl/shardctlpb/shardctl.proto",
}

func (m *Args) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Args) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Args) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MoveShard != 0 {
		i = encodeVarintShardctl(dAtA, i, uint64(m.MoveShard))
		i--
		dAtA[i] = 0x38
	}
	if m.SessionHeader != nil {
		{
			size, err := m.SessionHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShardctl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.QueryNum != 0 {
		i = encodeVarintShardctl(dAtA, i, uint64(m.QueryNum))
		i--
		dAtA[i] = 0x28
	}
	if m.MoveGID != 0 {
		i = encodeVarintShardctl(dAtA, i, uint64(m.MoveGID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.LeaveGIDs) > 0 {
		dAtA3 := make([]byte, len(m.LeaveGIDs)*10)
		var j2 int
		for _, num1 := range m.LeaveGIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintShardctl(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewGroups) > 0 {
		for iNdEx := len(m.NewGroups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NewGroups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShardctl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Type != 0 {
		i = encodeVarintShardctl(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShardctl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintShardctl(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintShardctl(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.WrongLeader {
		i--
		if m.WrongLeader {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Group) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Servers) > 0 {
		for iNdEx := len(m.Servers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Servers[iNdEx])
			copy(dAtA[i:], m.Servers[iNdEx])
			i = encodeVarintShardctl(dAtA, i, uint64(len(m.Servers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ID != 0 {
		i = encodeVarintShardctl(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShardctl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Shards) > 0 {
		dAtA6 := make([]byte, len(m.Shards)*10)
		var j5 int
		for _, num1 := range m.Shards {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintShardctl(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x12
	}
	if m.Num != 0 {
		i = encodeVarintShardctl(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintShardctl(dAtA []byte, offset int, v uint64) int {
	offset -= sovShardctl(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Args) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovShardctl(uint64(m.Type))
	}
	if len(m.NewGroups) > 0 {
		for _, e := range m.NewGroups {
			l = e.Size()
			n += 1 + l + sovShardctl(uint64(l))
		}
	}
	if len(m.LeaveGIDs) > 0 {
		l = 0
		for _, e := range m.LeaveGIDs {
			l += sovShardctl(uint64(e))
		}
		n += 1 + sovShardctl(uint64(l)) + l
	}
	if m.MoveGID != 0 {
		n += 1 + sovShardctl(uint64(m.MoveGID))
	}
	if m.QueryNum != 0 {
		n += 1 + sovShardctl(uint64(m.QueryNum))
	}
	if m.SessionHeader != nil {
		l = m.SessionHeader.Size()
		n += 1 + l + sovShardctl(uint64(l))
	}
	if m.MoveShard != 0 {
		n += 1 + sovShardctl(uint64(m.MoveShard))
	}
	return n
}

func (m *Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WrongLeader {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovShardctl(uint64(m.Status))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovShardctl(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovShardctl(uint64(l))
	}
	return n
}

func (m *Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovShardctl(uint64(m.ID))
	}
	if len(m.Servers) > 0 {
		for _, s := range m.Servers {
			l = len(s)
			n += 1 + l + sovShardctl(uint64(l))
		}
	}
	return n
}

func (m *Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovShardctl(uint64(m.Num))
	}
	if len(m.Shards) > 0 {
		l = 0
		for _, e := range m.Shards {
			l += sovShardctl(uint64(e))
		}
		n += 1 + sovShardctl(uint64(l)) + l
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovShardctl(uint64(l))
		}
	}
	return n
}

func sovShardctl(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozShardctl(x uint64) (n int) {
	return sovShardctl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Args) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShardctl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Args: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Args: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardctl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= OpType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardctl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShardctl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShardctl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewGroups = append(m.NewGroups, &Group{})
			if err := m.NewGroups[len(m.NewGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShardctl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LeaveGIDs = append(m.LeaveGIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShardctl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthShardctl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthShardctl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LeaveGIDs) == 0 {
					m.LeaveGIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShardctl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LeaveGIDs = append(m.LeaveGIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaveGIDs", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoveGID", wireType)
			}
			m.MoveGID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardctl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MoveGID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryNum", wireType)
			}
			m.QueryNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardctl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardctl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShardctl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShardctl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SessionHeader == nil {
				m.SessionHeader = &sessionpb.SessionHeader{}
			}
			if err := m.SessionHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoveShard", wireType)
			}
			m.MoveShard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardctl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MoveShard |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShardctl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShardctl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShardctl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrongLeader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardctl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WrongLeader = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardctl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ReplyStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardctl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShardctl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShardctl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardctl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShardctl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShardctl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &Config{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShardctl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShardctl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Group) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShardctl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardctl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardctl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShardctl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShardctl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Servers = append(m.Servers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShardctl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShardctl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShardctl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardctl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShardctl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Shards = append(m.Shards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShardctl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthShardctl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthShardctl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Shards) == 0 {
					m.Shards = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShardctl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Shards = append(m.Shards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardctl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShardctl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShardctl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShardctl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShardctl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShardctl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShardctl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShardctl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShardctl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShardctl
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupShardctl
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthShardctl
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthShardctl        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShardctl          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupShardctl = fmt.Errorf("proto: unexpected end of group")
)
