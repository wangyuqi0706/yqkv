// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: yqkvpb/yqkvpb.proto

package yqkvpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	sessionpb "github.com/wangyuqi0706/yqkv/session/sessionpb"
	shardctlpb "github.com/wangyuqi0706/yqkv/shardctl/shardctlpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ShardStatus int32

const (
	SERVING    ShardStatus = 0
	PULLING    ShardStatus = 1
	BE_PULLING ShardStatus = 2
	GC         ShardStatus = 3
)

var ShardStatus_name = map[int32]string{
	0: "SERVING",
	1: "PULLING",
	2: "BE_PULLING",
	3: "GC",
}

var ShardStatus_value = map[string]int32{
	"SERVING":    0,
	"PULLING":    1,
	"BE_PULLING": 2,
	"GC":         3,
}

func (x ShardStatus) String() string {
	return proto.EnumName(ShardStatus_name, int32(x))
}

func (ShardStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8d0da8c9a5fce0be, []int{0}
}

type OpType int32

const (
	EMPTY         OpType = 0
	GET           OpType = 1
	PUT           OpType = 2
	APPEND        OpType = 3
	PULL_SHARDS   OpType = 4
	INSERT_SHARDS OpType = 5
	RECONFIGURE   OpType = 6
	DELETE_SHARDS OpType = 7
)

var OpType_name = map[int32]string{
	0: "EMPTY",
	1: "GET",
	2: "PUT",
	3: "APPEND",
	4: "PULL_SHARDS",
	5: "INSERT_SHARDS",
	6: "RECONFIGURE",
	7: "DELETE_SHARDS",
}

var OpType_value = map[string]int32{
	"EMPTY":         0,
	"GET":           1,
	"PUT":           2,
	"APPEND":        3,
	"PULL_SHARDS":   4,
	"INSERT_SHARDS": 5,
	"RECONFIGURE":   6,
	"DELETE_SHARDS": 7,
}

func (x OpType) String() string {
	return proto.EnumName(OpType_name, int32(x))
}

func (OpType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8d0da8c9a5fce0be, []int{1}
}

type ReplyStatus int32

const (
	OK                   ReplyStatus = 0
	ERR_WRONG_LEADER     ReplyStatus = 1
	ERR_NOT_READY        ReplyStatus = 2
	ERR_WRONG_GROUP      ReplyStatus = 3
	ERR_OUT_DATED_CONFIG ReplyStatus = 4
	ERR_NO_KEY           ReplyStatus = 5
	ERR_BAD_SESSION      ReplyStatus = 6
)

var ReplyStatus_name = map[int32]string{
	0: "OK",
	1: "ERR_WRONG_LEADER",
	2: "ERR_NOT_READY",
	3: "ERR_WRONG_GROUP",
	4: "ERR_OUT_DATED_CONFIG",
	5: "ERR_NO_KEY",
	6: "ERR_BAD_SESSION",
}

var ReplyStatus_value = map[string]int32{
	"OK":                   0,
	"ERR_WRONG_LEADER":     1,
	"ERR_NOT_READY":        2,
	"ERR_WRONG_GROUP":      3,
	"ERR_OUT_DATED_CONFIG": 4,
	"ERR_NO_KEY":           5,
	"ERR_BAD_SESSION":      6,
}

func (x ReplyStatus) String() string {
	return proto.EnumName(ReplyStatus_name, int32(x))
}

func (ReplyStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8d0da8c9a5fce0be, []int{2}
}

type Args struct {
	Type          OpType                   `protobuf:"varint,1,opt,name=type,proto3,enum=yqkvpb.OpType" json:"type,omitempty"`
	SessionHeader *sessionpb.SessionHeader `protobuf:"bytes,2,opt,name=SessionHeader,proto3" json:"SessionHeader,omitempty"`
	Key           string                   `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value         string                   `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	NextConfig    *shardctlpb.Config       `protobuf:"bytes,5,opt,name=nextConfig,proto3" json:"nextConfig,omitempty"`
	ShardIDs      []int64                  `protobuf:"varint,6,rep,packed,name=shardIDs,proto3" json:"shardIDs,omitempty"`
	ConfigNum     int64                    `protobuf:"varint,7,opt,name=configNum,proto3" json:"configNum,omitempty"`
	PulledShards  *PullShardsResponse      `protobuf:"bytes,8,opt,name=pulledShards,proto3" json:"pulledShards,omitempty"`
}

func (m *Args) Reset()         { *m = Args{} }
func (m *Args) String() string { return proto.CompactTextString(m) }
func (*Args) ProtoMessage()    {}
func (*Args) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d0da8c9a5fce0be, []int{0}
}
func (m *Args) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Args) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Args.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Args) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Args.Merge(m, src)
}
func (m *Args) XXX_Size() int {
	return m.Size()
}
func (m *Args) XXX_DiscardUnknown() {
	xxx_messageInfo_Args.DiscardUnknown(m)
}

var xxx_messageInfo_Args proto.InternalMessageInfo

type Reply struct {
	Status  ReplyStatus `protobuf:"varint,1,opt,name=status,proto3,enum=yqkvpb.ReplyStatus" json:"status,omitempty"`
	Value   string      `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Message string      `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    []byte      `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d0da8c9a5fce0be, []int{1}
}
func (m *Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return m.Size()
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

type Shard struct {
	ID     int64             `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	KV     map[string]string `protobuf:"bytes,2,rep,name=KV,proto3" json:"KV,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status ShardStatus       `protobuf:"varint,3,opt,name=status,proto3,enum=yqkvpb.ShardStatus" json:"status,omitempty"`
}

func (m *Shard) Reset()         { *m = Shard{} }
func (m *Shard) String() string { return proto.CompactTextString(m) }
func (*Shard) ProtoMessage()    {}
func (*Shard) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d0da8c9a5fce0be, []int{2}
}
func (m *Shard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Shard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Shard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Shard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Shard.Merge(m, src)
}
func (m *Shard) XXX_Size() int {
	return m.Size()
}
func (m *Shard) XXX_DiscardUnknown() {
	xxx_messageInfo_Shard.DiscardUnknown(m)
}

var xxx_messageInfo_Shard proto.InternalMessageInfo

type PullShardsResponse struct {
	Shards         []*Shard                           `protobuf:"bytes,1,rep,name=shards,proto3" json:"shards,omitempty"`
	ServerSessions map[int64]*sessionpb.ServerSession `protobuf:"bytes,2,rep,name=serverSessions,proto3" json:"serverSessions,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ConfigNum      int64                              `protobuf:"varint,3,opt,name=configNum,proto3" json:"configNum,omitempty"`
}

func (m *PullShardsResponse) Reset()         { *m = PullShardsResponse{} }
func (m *PullShardsResponse) String() string { return proto.CompactTextString(m) }
func (*PullShardsResponse) ProtoMessage()    {}
func (*PullShardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d0da8c9a5fce0be, []int{3}
}
func (m *PullShardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullShardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullShardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullShardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullShardsResponse.Merge(m, src)
}
func (m *PullShardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *PullShardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PullShardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PullShardsResponse proto.InternalMessageInfo

type ServerSession struct {
	ID           int64             `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ProcessedSeq uint64            `protobuf:"varint,2,opt,name=ProcessedSeq,proto3" json:"ProcessedSeq,omitempty"`
	ResponseMap  map[uint64]*Reply `protobuf:"bytes,3,rep,name=ResponseMap,proto3" json:"ResponseMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LastReply    *Reply            `protobuf:"bytes,4,opt,name=LastReply,proto3" json:"LastReply,omitempty"`
}

func (m *ServerSession) Reset()         { *m = ServerSession{} }
func (m *ServerSession) String() string { return proto.CompactTextString(m) }
func (*ServerSession) ProtoMessage()    {}
func (*ServerSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d0da8c9a5fce0be, []int{4}
}
func (m *ServerSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerSession.Merge(m, src)
}
func (m *ServerSession) XXX_Size() int {
	return m.Size()
}
func (m *ServerSession) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerSession.DiscardUnknown(m)
}

var xxx_messageInfo_ServerSession proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("yqkvpb.ShardStatus", ShardStatus_name, ShardStatus_value)
	proto.RegisterEnum("yqkvpb.OpType", OpType_name, OpType_value)
	proto.RegisterEnum("yqkvpb.ReplyStatus", ReplyStatus_name, ReplyStatus_value)
	proto.RegisterType((*Args)(nil), "yqkvpb.Args")
	proto.RegisterType((*Reply)(nil), "yqkvpb.Reply")
	proto.RegisterType((*Shard)(nil), "yqkvpb.Shard")
	proto.RegisterMapType((map[string]string)(nil), "yqkvpb.Shard.KVEntry")
	proto.RegisterType((*PullShardsResponse)(nil), "yqkvpb.PullShardsResponse")
	proto.RegisterMapType((map[int64]*sessionpb.ServerSession)(nil), "yqkvpb.PullShardsResponse.ServerSessionsEntry")
	proto.RegisterType((*ServerSession)(nil), "yqkvpb.ServerSession")
	proto.RegisterMapType((map[uint64]*Reply)(nil), "yqkvpb.ServerSession.ResponseMapEntry")
}

func init() { proto.RegisterFile("yqkvpb/yqkvpb.proto", fileDescriptor_8d0da8c9a5fce0be) }

var fileDescriptor_8d0da8c9a5fce0be = []byte{
	// 915 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x4f, 0x6f, 0xe2, 0x46,
	0x14, 0xc7, 0x36, 0x98, 0xcd, 0x83, 0xb0, 0xd3, 0x49, 0x2a, 0x59, 0xa8, 0x42, 0x88, 0xd5, 0xae,
	0x68, 0xa2, 0x3a, 0x2b, 0xaa, 0xfe, 0x51, 0x0f, 0x5b, 0x91, 0x78, 0x4a, 0x10, 0x04, 0xd0, 0x18,
	0xa8, 0xd2, 0x1e, 0x2c, 0x03, 0xb3, 0x6c, 0xb4, 0x04, 0x3b, 0x8c, 0x9d, 0x86, 0x8f, 0xb0, 0x97,
	0xaa, 0xea, 0xa9, 0xe7, 0x7e, 0x92, 0x1e, 0xf7, 0x98, 0x63, 0x8f, 0xdd, 0xe4, 0x8b, 0x54, 0x1e,
	0xdb, 0xc1, 0x66, 0xb7, 0xd5, 0x9e, 0x3c, 0xef, 0xbd, 0xdf, 0xfc, 0xe6, 0xbd, 0xdf, 0x7b, 0xe3,
	0x81, 0xbd, 0xf5, 0xd5, 0xeb, 0x6b, 0x77, 0x72, 0x14, 0x7e, 0x74, 0x77, 0xe5, 0x78, 0x0e, 0x56,
	0x43, 0xab, 0xfc, 0xc5, 0xfc, 0xc2, 0x7b, 0xe5, 0x4f, 0xf4, 0xa9, 0x73, 0x79, 0x34, 0x77, 0xe6,
	0xce, 0x91, 0x08, 0x4f, 0xfc, 0x97, 0xc2, 0x12, 0x86, 0x58, 0x85, 0xdb, 0xca, 0xbb, 0x9c, 0x71,
	0x7e, 0xe1, 0x2c, 0x23, 0xb3, 0xc4, 0x5f, 0xd9, 0xab, 0xd9, 0xd4, 0x5b, 0x84, 0x76, 0xed, 0x2f,
	0x19, 0xb2, 0xcd, 0xd5, 0x9c, 0xe3, 0x1a, 0x64, 0xbd, 0xb5, 0xcb, 0x34, 0xa9, 0x2a, 0xd5, 0x4b,
	0x8d, 0x92, 0x1e, 0x9d, 0xdd, 0x77, 0x87, 0x6b, 0x97, 0x51, 0x11, 0xc3, 0x2f, 0x60, 0xd7, 0x0c,
	0xd9, 0x4e, 0x99, 0x3d, 0x63, 0x2b, 0x4d, 0xae, 0x4a, 0xf5, 0x42, 0x43, 0xd3, 0xa3, 0x33, 0xdc,
	0x89, 0x9e, 0x8a, 0xd3, 0x34, 0x1c, 0x23, 0x50, 0x5e, 0xb3, 0xb5, 0xa6, 0x54, 0xa5, 0xfa, 0x0e,
	0x0d, 0x96, 0x78, 0x1f, 0x72, 0xd7, 0xf6, 0xc2, 0x67, 0x5a, 0x56, 0xf8, 0x42, 0x03, 0x37, 0x00,
	0x96, 0xec, 0xc6, 0x3b, 0x71, 0x96, 0x2f, 0x2f, 0xe6, 0x5a, 0x4e, 0x1c, 0x82, 0xf5, 0x38, 0x73,
	0x77, 0xa2, 0x87, 0x11, 0x9a, 0x40, 0xe1, 0x32, 0x3c, 0x12, 0x80, 0xb6, 0xc1, 0x35, 0xb5, 0xaa,
	0xd4, 0x15, 0xfa, 0x60, 0xe3, 0xcf, 0x60, 0x67, 0x2a, 0x50, 0x3d, 0xff, 0x52, 0xcb, 0x57, 0xa5,
	0xba, 0x42, 0x37, 0x0e, 0xfc, 0x02, 0x8a, 0xae, 0xbf, 0x58, 0xb0, 0x99, 0x19, 0xe0, 0xb9, 0xf6,
	0x48, 0x9c, 0x57, 0x8e, 0x15, 0x18, 0xf8, 0x8b, 0x45, 0x18, 0xa1, 0x8c, 0xbb, 0xce, 0x92, 0x33,
	0x9a, 0xc2, 0xd7, 0x6e, 0x20, 0x47, 0x99, 0xbb, 0x58, 0xe3, 0x43, 0x50, 0xb9, 0x67, 0x7b, 0x3e,
	0x8f, 0x44, 0xdc, 0x8b, 0x29, 0x44, 0xd8, 0x14, 0x21, 0x1a, 0x41, 0x36, 0x95, 0xcb, 0xc9, 0xca,
	0x35, 0xc8, 0x5f, 0x32, 0xce, 0xed, 0x39, 0x8b, 0x54, 0x8a, 0x4d, 0x8c, 0x21, 0x3b, 0xb3, 0x3d,
	0x5b, 0x08, 0x55, 0xa4, 0x62, 0x5d, 0xfb, 0x53, 0x82, 0x9c, 0x48, 0x02, 0x97, 0x40, 0x6e, 0x1b,
	0xe2, 0x58, 0x85, 0xca, 0x6d, 0x03, 0x3f, 0x05, 0xb9, 0x33, 0xd6, 0xe4, 0xaa, 0x52, 0x2f, 0x34,
	0x3e, 0x8d, 0xd3, 0x10, 0x50, 0xbd, 0x33, 0x26, 0x4b, 0x6f, 0xb5, 0xa6, 0x72, 0x67, 0x9c, 0xc8,
	0x58, 0x49, 0x67, 0x2c, 0xa0, 0xe9, 0x8c, 0xcb, 0x5f, 0x41, 0x3e, 0xda, 0x1b, 0x37, 0x52, 0xfa,
	0x40, 0x23, 0x93, 0xe5, 0x7c, 0x27, 0x7f, 0x2b, 0xd5, 0x7e, 0x95, 0x01, 0xbf, 0xaf, 0x21, 0x7e,
	0x0a, 0x2a, 0x0f, 0xf5, 0x96, 0x44, 0x96, 0xbb, 0xa9, 0xa3, 0x69, 0x14, 0xc4, 0x63, 0x28, 0x71,
	0xb6, 0xba, 0x66, 0xab, 0x68, 0x92, 0x78, 0x54, 0x94, 0xfe, 0xdf, 0xed, 0xd1, 0xcd, 0xd4, 0x86,
	0xb0, 0xda, 0x2d, 0x96, 0xf4, 0x48, 0x28, 0x5b, 0x23, 0x51, 0xfe, 0x19, 0xf6, 0x3e, 0x40, 0x92,
	0x2c, 0x5b, 0x09, 0xcb, 0xd6, 0x93, 0x65, 0x6f, 0xdf, 0x84, 0x04, 0x41, 0x52, 0x90, 0x37, 0x72,
	0x70, 0x8d, 0x12, 0xc1, 0xf7, 0xba, 0x57, 0x83, 0xe2, 0x60, 0xe5, 0x4c, 0x19, 0xe7, 0x6c, 0x66,
	0xb2, 0x2b, 0x41, 0x9e, 0xa5, 0x29, 0x1f, 0x3e, 0x85, 0x42, 0x5c, 0xf0, 0x99, 0xed, 0x6a, 0x8a,
	0x50, 0xe5, 0xd9, 0x83, 0x88, 0x49, 0x7e, 0x3d, 0x01, 0x0c, 0xd5, 0x48, 0x6e, 0xc5, 0x87, 0xb0,
	0xd3, 0xb5, 0xb9, 0x27, 0x86, 0x54, 0x8c, 0x57, 0xa2, 0x19, 0xc2, 0x49, 0x37, 0xf1, 0xf2, 0x19,
	0xa0, 0x6d, 0xb6, 0xa4, 0x2c, 0xd9, 0x50, 0x96, 0x27, 0x69, 0x59, 0xb6, 0xe8, 0x36, 0x5a, 0x1c,
	0x7c, 0x0f, 0x85, 0xc4, 0xa8, 0xe1, 0x02, 0xe4, 0x4d, 0x42, 0xc7, 0xed, 0x5e, 0x0b, 0x65, 0x02,
	0x63, 0x30, 0xea, 0x76, 0x03, 0x43, 0xc2, 0x25, 0x80, 0x63, 0x62, 0xc5, 0xb6, 0x8c, 0x55, 0x90,
	0x5b, 0x27, 0x48, 0x39, 0x58, 0x83, 0x1a, 0xfe, 0xa2, 0xf0, 0x0e, 0xe4, 0xc8, 0xd9, 0x60, 0x78,
	0x8e, 0x32, 0x38, 0x0f, 0x4a, 0x8b, 0x0c, 0x91, 0x14, 0x2c, 0x06, 0xa3, 0x21, 0x92, 0x31, 0x80,
	0xda, 0x1c, 0x0c, 0x48, 0xcf, 0x40, 0x0a, 0x7e, 0x0c, 0x85, 0x80, 0xc7, 0x32, 0x4f, 0x9b, 0xd4,
	0x30, 0x51, 0x16, 0x7f, 0x02, 0xbb, 0xed, 0x9e, 0x49, 0xe8, 0x30, 0x76, 0xe5, 0x02, 0x0c, 0x25,
	0x27, 0xfd, 0xde, 0x0f, 0xed, 0xd6, 0x88, 0x12, 0xa4, 0x06, 0x18, 0x83, 0x74, 0xc9, 0x90, 0xc4,
	0x98, 0xfc, 0xc1, 0xef, 0x52, 0xd0, 0x82, 0x87, 0x9b, 0x1d, 0xa4, 0xd4, 0xef, 0xa0, 0x0c, 0xde,
	0x07, 0x44, 0x28, 0xb5, 0x7e, 0xa4, 0xfd, 0x5e, 0xcb, 0xea, 0x92, 0xa6, 0x41, 0x28, 0x92, 0x02,
	0x82, 0xc0, 0xdb, 0xeb, 0x0f, 0x2d, 0x4a, 0x9a, 0xc6, 0x39, 0x92, 0xf1, 0x1e, 0x3c, 0xde, 0x00,
	0x5b, 0xb4, 0x3f, 0x1a, 0x20, 0x05, 0x6b, 0xb0, 0x1f, 0x38, 0xfb, 0xa3, 0xa1, 0x65, 0x34, 0x87,
	0xc4, 0xb0, 0xc2, 0x2c, 0x50, 0x36, 0x90, 0x20, 0x64, 0xb0, 0x3a, 0xe4, 0x1c, 0xe5, 0xe2, 0xed,
	0xc7, 0x4d, 0xc3, 0x32, 0x89, 0x69, 0xb6, 0xfb, 0x3d, 0xa4, 0x36, 0xde, 0x48, 0x90, 0x17, 0x8a,
	0x76, 0xc6, 0xf8, 0x19, 0xe4, 0xc9, 0x0d, 0x9b, 0xfa, 0x1e, 0xc3, 0xc5, 0xb8, 0x03, 0xc1, 0xbf,
	0xbe, 0x9c, 0xee, 0x07, 0xfe, 0x1c, 0x60, 0x73, 0x8b, 0xfe, 0x1f, 0x7a, 0x08, 0x45, 0x83, 0x2d,
	0x98, 0xc7, 0x3e, 0x02, 0x7c, 0xdc, 0x7e, 0xfb, 0xae, 0x92, 0xb9, 0x7d, 0x57, 0xc9, 0xbc, 0xbd,
	0xab, 0x48, 0xb7, 0x77, 0x15, 0xe9, 0x9f, 0xbb, 0x8a, 0xf4, 0xdb, 0x7d, 0x25, 0xf3, 0xc7, 0x7d,
	0x25, 0x73, 0x7b, 0x5f, 0xc9, 0xfc, 0x7d, 0x5f, 0xc9, 0xfc, 0xf4, 0x24, 0xf1, 0x9e, 0xfd, 0x62,
	0x2f, 0xe7, 0x6b, 0xff, 0xea, 0xe2, 0xf9, 0x37, 0xcf, 0xbf, 0x16, 0xaf, 0x5f, 0xf4, 0x04, 0x4e,
	0x54, 0xf1, 0x5a, 0x7d, 0xf9, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x11, 0x83, 0x46, 0x22, 0x1a,
	0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ShardKVClient is the client API for ShardKV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShardKVClient interface {
	Execute(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Reply, error)
	PullShards(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Reply, error)
	DeleteShards(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Reply, error)
}

type shardKVClient struct {
	cc *grpc.ClientConn
}

func NewShardKVClient(cc *grpc.ClientConn) ShardKVClient {
	return &shardKVClient{cc}
}

func (c *shardKVClient) Execute(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/yqkvpb.ShardKV/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardKVClient) PullShards(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/yqkvpb.ShardKV/PullShards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardKVClient) DeleteShards(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/yqkvpb.ShardKV/DeleteShards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShardKVServer is the server API for ShardKV service.
type ShardKVServer interface {
	Execute(context.Context, *Args) (*Reply, error)
	PullShards(context.Context, *Args) (*Reply, error)
	DeleteShards(context.Context, *Args) (*Reply, error)
}

// UnimplementedShardKVServer can be embedded to have forward compatible implementations.
type UnimplementedShardKVServer struct {
}

func (*UnimplementedShardKVServer) Execute(ctx context.Context, req *Args) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (*UnimplementedShardKVServer) PullShards(ctx context.Context, req *Args) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullShards not implemented")
}
func (*UnimplementedShardKVServer) DeleteShards(ctx context.Context, req *Args) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShards not implemented")
}

func RegisterShardKVServer(s *grpc.Server, srv ShardKVServer) {
	s.RegisterService(&_ShardKV_serviceDesc, srv)
}

func _ShardKV_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardKVServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yqkvpb.ShardKV/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardKVServer).Execute(ctx, req.(*Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardKV_PullShards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardKVServer).PullShards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yqkvpb.ShardKV/PullShards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardKVServer).PullShards(ctx, req.(*Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardKV_DeleteShards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardKVServer).DeleteShards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yqkvpb.ShardKV/DeleteShards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardKVServer).DeleteShards(ctx, req.(*Args))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShardKV_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yqkvpb.ShardKV",
	HandlerType: (*ShardKVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _ShardKV_Execute_Handler,
		},
		{
			MethodName: "PullShards",
			Handler:    _ShardKV_PullShards_Handler,
		},
		{
			MethodName: "DeleteShards",
			Handler:    _ShardKV_DeleteShards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yqkvpb/yqkvpb.proto",
}

func (m *Args) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Args) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Args) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PulledShards != nil {
		{
			size, err := m.PulledShards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYqkvpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.ConfigNum != 0 {
		i = encodeVarintYqkvpb(dAtA, i, uint64(m.ConfigNum))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ShardIDs) > 0 {
		dAtA3 := make([]byte, len(m.ShardIDs)*10)
		var j2 int
		for _, num1 := range m.ShardIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintYqkvpb(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x32
	}
	if m.NextConfig != nil {
		{
			size, err := m.NextConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYqkvpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintYqkvpb(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintYqkvpb(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SessionHeader != nil {
		{
			size, err := m.SessionHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYqkvpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintYqkvpb(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintYqkvpb(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintYqkvpb(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintYqkvpb(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintYqkvpb(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Shard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Shard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Shard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintYqkvpb(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.KV) > 0 {
		for k := range m.KV {
			v := m.KV[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintYqkvpb(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintYqkvpb(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintYqkvpb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ID != 0 {
		i = encodeVarintYqkvpb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PullShardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullShardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullShardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConfigNum != 0 {
		i = encodeVarintYqkvpb(dAtA, i, uint64(m.ConfigNum))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ServerSessions) > 0 {
		for k := range m.ServerSessions {
			v := m.ServerSessions[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintYqkvpb(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintYqkvpb(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintYqkvpb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Shards) > 0 {
		for iNdEx := len(m.Shards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintYqkvpb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ServerSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastReply != nil {
		{
			size, err := m.LastReply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYqkvpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ResponseMap) > 0 {
		for k := range m.ResponseMap {
			v := m.ResponseMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintYqkvpb(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintYqkvpb(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintYqkvpb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ProcessedSeq != 0 {
		i = encodeVarintYqkvpb(dAtA, i, uint64(m.ProcessedSeq))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintYqkvpb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintYqkvpb(dAtA []byte, offset int, v uint64) int {
	offset -= sovYqkvpb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Args) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovYqkvpb(uint64(m.Type))
	}
	if m.SessionHeader != nil {
		l = m.SessionHeader.Size()
		n += 1 + l + sovYqkvpb(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovYqkvpb(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovYqkvpb(uint64(l))
	}
	if m.NextConfig != nil {
		l = m.NextConfig.Size()
		n += 1 + l + sovYqkvpb(uint64(l))
	}
	if len(m.ShardIDs) > 0 {
		l = 0
		for _, e := range m.ShardIDs {
			l += sovYqkvpb(uint64(e))
		}
		n += 1 + sovYqkvpb(uint64(l)) + l
	}
	if m.ConfigNum != 0 {
		n += 1 + sovYqkvpb(uint64(m.ConfigNum))
	}
	if m.PulledShards != nil {
		l = m.PulledShards.Size()
		n += 1 + l + sovYqkvpb(uint64(l))
	}
	return n
}

func (m *Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovYqkvpb(uint64(m.Status))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovYqkvpb(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovYqkvpb(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovYqkvpb(uint64(l))
	}
	return n
}

func (m *Shard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovYqkvpb(uint64(m.ID))
	}
	if len(m.KV) > 0 {
		for k, v := range m.KV {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovYqkvpb(uint64(len(k))) + 1 + len(v) + sovYqkvpb(uint64(len(v)))
			n += mapEntrySize + 1 + sovYqkvpb(uint64(mapEntrySize))
		}
	}
	if m.Status != 0 {
		n += 1 + sovYqkvpb(uint64(m.Status))
	}
	return n
}

func (m *PullShardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Shards) > 0 {
		for _, e := range m.Shards {
			l = e.Size()
			n += 1 + l + sovYqkvpb(uint64(l))
		}
	}
	if len(m.ServerSessions) > 0 {
		for k, v := range m.ServerSessions {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovYqkvpb(uint64(l))
			}
			mapEntrySize := 1 + sovYqkvpb(uint64(k)) + l
			n += mapEntrySize + 1 + sovYqkvpb(uint64(mapEntrySize))
		}
	}
	if m.ConfigNum != 0 {
		n += 1 + sovYqkvpb(uint64(m.ConfigNum))
	}
	return n
}

func (m *ServerSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovYqkvpb(uint64(m.ID))
	}
	if m.ProcessedSeq != 0 {
		n += 1 + sovYqkvpb(uint64(m.ProcessedSeq))
	}
	if len(m.ResponseMap) > 0 {
		for k, v := range m.ResponseMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovYqkvpb(uint64(l))
			}
			mapEntrySize := 1 + sovYqkvpb(uint64(k)) + l
			n += mapEntrySize + 1 + sovYqkvpb(uint64(mapEntrySize))
		}
	}
	if m.LastReply != nil {
		l = m.LastReply.Size()
		n += 1 + l + sovYqkvpb(uint64(l))
	}
	return n
}

func sovYqkvpb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozYqkvpb(x uint64) (n int) {
	return sovYqkvpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Args) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYqkvpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Args: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Args: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYqkvpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= OpType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYqkvpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYqkvpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYqkvpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SessionHeader == nil {
				m.SessionHeader = &sessionpb.SessionHeader{}
			}
			if err := m.SessionHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYqkvpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYqkvpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYqkvpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYqkvpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYqkvpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYqkvpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYqkvpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYqkvpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYqkvpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextConfig == nil {
				m.NextConfig = &shardctlpb.Config{}
			}
			if err := m.NextConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowYqkvpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ShardIDs = append(m.ShardIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowYqkvpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthYqkvpb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthYqkvpb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ShardIDs) == 0 {
					m.ShardIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYqkvpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ShardIDs = append(m.ShardIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardIDs", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigNum", wireType)
			}
			m.ConfigNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYqkvpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PulledShards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYqkvpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYqkvpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYqkvpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PulledShards == nil {
				m.PulledShards = &PullShardsResponse{}
			}
			if err := m.PulledShards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYqkvpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYqkvpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYqkvpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYqkvpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ReplyStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYqkvpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYqkvpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYqkvpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYqkvpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYqkvpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYqkvpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYqkvpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthYqkvpb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthYqkvpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYqkvpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYqkvpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Shard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYqkvpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Shard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Shard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYqkvpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KV", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYqkvpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYqkvpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYqkvpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KV == nil {
				m.KV = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowYqkvpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYqkvpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthYqkvpb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthYqkvpb
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYqkvpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthYqkvpb
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthYqkvpb
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipYqkvpb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthYqkvpb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.KV[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYqkvpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ShardStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipYqkvpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYqkvpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullShardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYqkvpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullShardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullShardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYqkvpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYqkvpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYqkvpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shards = append(m.Shards, &Shard{})
			if err := m.Shards[len(m.Shards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerSessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYqkvpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYqkvpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYqkvpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerSessions == nil {
				m.ServerSessions = make(map[int64]*sessionpb.ServerSession)
			}
			var mapkey int64
			var mapvalue *sessionpb.ServerSession
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowYqkvpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYqkvpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYqkvpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthYqkvpb
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthYqkvpb
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &sessionpb.ServerSession{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipYqkvpb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthYqkvpb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ServerSessions[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigNum", wireType)
			}
			m.ConfigNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYqkvpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipYqkvpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYqkvpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYqkvpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYqkvpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessedSeq", wireType)
			}
			m.ProcessedSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYqkvpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProcessedSeq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYqkvpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYqkvpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYqkvpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponseMap == nil {
				m.ResponseMap = make(map[uint64]*Reply)
			}
			var mapkey uint64
			var mapvalue *Reply
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowYqkvpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYqkvpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYqkvpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthYqkvpb
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthYqkvpb
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Reply{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipYqkvpb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthYqkvpb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ResponseMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastReply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYqkvpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYqkvpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYqkvpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastReply == nil {
				m.LastReply = &Reply{}
			}
			if err := m.LastReply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYqkvpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYqkvpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipYqkvpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowYqkvpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYqkvpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYqkvpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthYqkvpb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupYqkvpb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthYqkvpb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthYqkvpb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowYqkvpb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupYqkvpb = fmt.Errorf("proto: unexpected end of group")
)
